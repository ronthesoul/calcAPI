name: calcAPI-ci.yaml

on:
  push:
    branches: [ "main" ]
    paths:
      - '**/*.go'
      - go.mod
      - go.sum
      - '.github/workflows/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - '**/*.go'
      - go.mod
      - go.sum
      - '.github/workflows/**'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      NOTIFY: .github/workflows/notify.sh
      IMAGE: m4gapower/calcapi
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.6'
          cache: true

      - name: Notify Start
        shell: bash
        run: |
          chmod +x "$NOTIFY"
          echo v1.63.4 > .golangci.version
          mkdir -p artifacts
          "$NOTIFY" ":bell: Starting ${{ github.event.repository.name }} CI - Run (#$GITHUB_RUN_NUMBER) Commit: ${{ github.event.head_commit.message }} :bell:" "$SLACK_WEBHOOK"

      - name: Cache golangci-lint binary
        id: lintcache
        uses: actions/cache@v4
        with:
          path: ~/go/bin/golangci-lint
          key: ${{ runner.os }}-golangci-${{ hashFiles('.golangci.version') }}

      - name: Install dependencies
        shell: bash
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq
          go mod tidy
          go mod download
          if [ "${{ steps.lintcache.outputs.cache-hit }}" != "true" ]; then
            GOLANGCI_VERSION=$(cat .golangci.version || echo v1.63.4)
            go install github.com/golangci/golangci-lint/cmd/golangci-lint@${GOLANGCI_VERSION}
          fi

      - name: Run golangci-lint
        shell: bash
        run: |
          set +e
          "$NOTIFY" "Starting Step - Lint" "$SLACK_WEBHOOK"
          mkdir -p artifacts
          golangci-lint run 2>&1 | tee artifacts/lint.log
          STATUS=${PIPESTATUS[0]}
          OUTPUT=$(sed 's/"/\\"/g' artifacts/lint.log | sed ':a;N;$!ba;s/\n/\\n/g')
          if [ $STATUS -eq 0 ]; then
            "$NOTIFY" "Step - Lint ‚úÖ Success" "$SLACK_WEBHOOK"
          else
            "$NOTIFY" "Step - Lint ‚ùå Failed:\n\`\`\`$OUTPUT\`\`\`" "$SLACK_WEBHOOK"
            exit 1
          fi

      - name: Early Build (produce binary)
        shell: bash
        run: |
          set -e
          "$NOTIFY" "Starting Step - Early Build (binary)" "$SLACK_WEBHOOK"
          mkdir -p artifacts
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 \
            go build -trimpath -ldflags="-s -w" -o artifacts/calcapi-linux-amd64 .
          sha256sum artifacts/calcapi-linux-amd64 | tee artifacts/calcapi-linux-amd64.sha256
          "$NOTIFY" "Step - Early Build ‚úÖ artifacts/calcapi-linux-amd64 ready" "$SLACK_WEBHOOK"


      - name: Test
        shell: bash
        run: |
          set +e
          "$NOTIFY" "Starting Step - Test" "$SLACK_WEBHOOK"
          mkdir -p artifacts
          go test -v ./... 2>&1 | tee artifacts/test.log
          STATUS=${PIPESTATUS[0]}
          OUTPUT=$(sed 's/"/\\"/g' artifacts/test.log | sed ':a;N;$!ba;s/\n/\\n/g')
          if [ $STATUS -eq 0 ]; then
            "$NOTIFY" "Step - Test ‚úÖ Success" "$SLACK_WEBHOOK"
          else
            "$NOTIFY" "Step - Test ‚ùå Failed:\n\`\`\`$OUTPUT\`\`\`" "$SLACK_WEBHOOK"
            exit 1
          fi

      - name: Build Docker image
        shell: bash
        run: |
          set -o pipefail
          "$NOTIFY" "üê≥ Starting Step - Build Docker image" "$SLACK_WEBHOOK"
          mkdir -p artifacts
          docker build --progress=plain -t "$IMAGE:latest" . 2>&1 | tee artifacts/docker-build.log
          STATUS=${PIPESTATUS[0]}
          if [ $STATUS -eq 0 ]; then
            "$NOTIFY" "Step - Build Docker image ‚úÖ Success" "$SLACK_WEBHOOK"
          else
            "$NOTIFY" "Step - Build Docker image ‚ùå Failed" "$SLACK_WEBHOOK"
            exit 1
          fi

      - name: Run & Test container
        shell: bash
        run: |
          "$NOTIFY" "üß™ Starting Step - Run & Test container" "$SLACK_WEBHOOK"
          docker run -d --rm -p 8080:8080 --name mycalc_test "$IMAGE:latest"
          mkdir -p artifacts
          for i in {1..10}; do
            if curl -fsS --max-time 2 http://localhost:8080/healthz | jq -e -r '.status=="ok"' >/dev/null; then
              HEALTH_JSON=$(curl -fsS http://localhost:8080/healthz || echo '{}')
              echo "$HEALTH_JSON" > artifacts/health.json
              SHORT=$(echo "$HEALTH_JSON" | jq -c .)
              "$NOTIFY" "Step - Run & Test container ‚úÖ Success (on :8080)\nHealth: \`\`\`${SHORT}\`\`\`" "$SLACK_WEBHOOK"
              docker stop mycalc_test
              exit 0
            fi
            sleep 1
          done
          curl -fsS http://localhost:8080/health > artifacts/health.json || true
          docker logs mycalc_test > artifacts/container.log 2>&1 || true
          TAIL=$(tail -n 80 artifacts/container.log | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')
          "$NOTIFY" "Step - Run & Test container ‚ùå Failed (no healthy response)\nLast logs:\n\`\`\`${TAIL}\`\`\`" "$SLACK_WEBHOOK"
          docker stop mycalc_test || true
          exit 1

      - name: Compute next SemVer MINOR tag
        shell: bash
        run: |
          "$NOTIFY" "üî¢ Starting Step - Compute next SemVer MINOR tag" "$SLACK_WEBHOOK"
          LATEST_SEMVER=$(
            curl -s "https://hub.docker.com/v2/repositories/$IMAGE/tags/?page_size=100" |
            jq -r '[.results[].name | select(test("^[0-9]+\\.[0-9]+\\.[0-9]+$"))]
                    | sort_by(split(".")|map(tonumber)) | last // empty'
          )
          BASE=${LATEST_SEMVER:-1.0.0}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE"
          NEW_TAG="${MAJOR}.$((MINOR+1)).0"
          echo "new_tag=$NEW_TAG" >> "$GITHUB_ENV"
          "$NOTIFY" "Step - Compute tag ‚úÖ $BASE ‚Üí $NEW_TAG" "$SLACK_WEBHOOK"

    
      - name: Tag image with NEW_TAG
        shell: bash
        run: |
          "$NOTIFY" "üè∑Ô∏è Starting Step - Tag image as ${IMAGE}:${new_tag}" "$SLACK_WEBHOOK"
          docker tag "$IMAGE:latest" "$IMAGE:${new_tag}"
          "$NOTIFY" "Step - Tag image ‚úÖ ${IMAGE}:${new_tag}" "$SLACK_WEBHOOK"

      - name: Push image(s)
        shell: bash
        run: |
          "$NOTIFY" "üì§ Starting Step - Push image(s)" "$SLACK_WEBHOOK"
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          docker push "$IMAGE:latest"
          docker push "$IMAGE:${new_tag}"
          "$NOTIFY" "Step - Push image(s) ‚úÖ $IMAGE:latest & $IMAGE:${new_tag}" "$SLACK_WEBHOOK"

      - name: Upload calcapi binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: calcapi-binary-${{ env.new_tag || github.sha }}
          path: |
            artifacts/calcapi-linux-amd64
            artifacts/calcapi-linux-amd64.sha256
          if-no-files-found: error
          retention-days: 7

      - name: Upload calcapi artifact
        uses: actions/upload-artifact@v4
        with:
          name: calcapi-binary-${{ env.new_tag }}
          path: |
            artifacts/calcapi-linux-amd64
            artifacts/calcapi-linux-amd64.sha256
          if-no-files-found: error
          retention-days: 7

      - name: Locate calcapi deployment file
        id: dep
        shell: bash
        run: |
          set -euo pipefail
          FILE=""
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          yq --version
          for f in $(git ls-files 'deployment/*.y*ml'); do
            if yq -e '.kind=="Deployment" and .metadata.name=="calcapi"' "$f" >/dev/null 2>&1; then
              FILE="$f"; break
            fi
          done
          if [ -z "$FILE" ]; then
            echo "No calcapi Deployment found under deployment/" >&2
            exit 1
          fi
          echo "file=$FILE" >> "$GITHUB_OUTPUT"
          echo "Found: $FILE"

      - name: Bump image tag in calcapi deployment (ArgoCD)
        shell: bash
        run: |
          DEPLOYFILE="${{ steps.dep.outputs.file }}"
          "$NOTIFY" "Starting Step - Update Deployment ($DEPLOYFILE)" "$SLACK_WEBHOOK"
          yq -i '
            (select(.kind=="Deployment" and .metadata.name=="calcapi")
             | .spec.template.spec.containers[] 
             | select(.name=="calcapi")
             | .image) = env(IMAGE) + ":" + env(new_tag)
          ' "$DEPLOYFILE"

          yq -e '
            select(.kind=="Deployment" and .metadata.name=="calcapi")
            | .spec.template.spec.containers[] 
            | select(.name=="calcapi") | .image == env(IMAGE) + ":" + env(new_tag)
          ' "$DEPLOYFILE" >/dev/null \
          && "$NOTIFY" "Step - Update Deployment ‚úÖ Success ($IMAGE:${new_tag})" "$SLACK_WEBHOOK" \
          || { "$NOTIFY" "Step - Update Deployment ‚ùå Failed" "$SLACK_WEBHOOK"; exit 1; }

      - name: Commit & push manifest changes (ArgoCD sync)
        shell: bash
        run: |
          "$NOTIFY" "Starting Step - Commit & push repo changes" "$SLACK_WEBHOOK"
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git add "${{ steps.dep.outputs.file }}"
          if git diff --cached --quiet; then
            "$NOTIFY" "Step - Commit & push ‚úÖ No changes to commit" "$SLACK_WEBHOOK"
            exit 0
          fi
          if git commit -m "chore(ci): bump calcapi image to ${IMAGE}:${{ env.new_tag }}" && git push; then
            "$NOTIFY" "Step - Commit & push ‚úÖ Success" "$SLACK_WEBHOOK"
          else
            "$NOTIFY" "Step - Commit & push ‚ùå Failed" "$SLACK_WEBHOOK"
            exit 1
          fi

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.15.4

      - name: Build & publish Helm chart for this image tag
        env:
          CHART_DIR: helm/calcapi
          IMAGE_REPO: ${{ env.IMAGE }}
          NEW_TAG: ${{ env.new_tag }}
          OWNER: ${{ github.repository_owner }}
          OCI_REGISTRY: ghcr.io/${{ github.repository_owner }}/charts
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          "$NOTIFY" "üì¶ Starting Step - Helm chart build for ${NEW_TAG}" "$SLACK_WEBHOOK"
          command -v yq >/dev/null || {
            sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64
            sudo chmod +x /usr/local/bin/yq
          }
          "$NOTIFY" "üîß Updating Chart.yaml and values.yaml" "$SLACK_WEBHOOK"
          yq -i '.appVersion = strenv(NEW_TAG)' "$CHART_DIR/Chart.yaml"
          CURR_VER=$(yq -r '.version' "$CHART_DIR/Chart.yaml")
          IFS='.' read -r MAJ MIN PAT <<< "${CURR_VER:-0.1.0}"
          NEW_VER="${MAJ}.$((MIN+1)).0"
          yq -i ".version = \"${NEW_VER}\"" "$CHART_DIR/Chart.yaml"
          yq -i ".image.repository = strenv(IMAGE_REPO) | .image.tag = strenv(NEW_TAG)" "$CHART_DIR/values.yaml"
          "$NOTIFY" "üîç Linting Helm chart" "$SLACK_WEBHOOK"
          helm lint "$CHART_DIR"
          "$NOTIFY" "üì¶ Packaging Helm chart" "$SLACK_WEBHOOK"
          mkdir -p artifacts
          helm package "$CHART_DIR" -d artifacts
          PKG_FILE=$(ls artifacts/*.tgz | head -n1)
          if [ -n "${GHCR_TOKEN:-}" ]; then
            "$NOTIFY" "üì§ Pushing Helm chart to OCI registry" "$SLACK_WEBHOOK"
            echo "$GHCR_TOKEN" | helm registry login ghcr.io -u "${OWNER}" --password-stdin
            helm push "$PKG_FILE" "oci://${OCI_REGISTRY}"
            "$NOTIFY" "Step - Helm chart ‚úÖ Pushed to oci://${OCI_REGISTRY}" "$SLACK_WEBHOOK"
          else
            "$NOTIFY" "‚ÑπÔ∏è Step - Helm chart packaged locally at $PKG_FILE (no push)" "$SLACK_WEBHOOK"
          fi

      - name: Commit & push chart bump
        shell: bash
        run: |
          "$NOTIFY" "Starting Step - Commit Helm chart bump ${IMAGE}:${{ env.new_tag }}" "$SLACK_WEBHOOK"
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git add helm/calcapi/Chart.yaml helm/calcapi/values.yaml artifacts/*.tgz || true
          if git diff --cached --quiet; then
            "$NOTIFY" "Step - Commit Helm chart ‚úÖ No changes" "$SLACK_WEBHOOK"
            exit 0
          fi
          if git commit -m "chore(ci): helm chart ${IMAGE}:${{ env.new_tag }} (chart ${NEW_VER})" && git push; then
            "$NOTIFY" "Step - Commit Helm chart ‚úÖ Success" "$SLACK_WEBHOOK"
          else
            "$NOTIFY" "Step - Commit Helm chart ‚ùå Failed" "$SLACK_WEBHOOK"
            exit 1
          fi

      - name: Show changed files (logs) + notify
        shell: bash
        run: |
          COMPARE="https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ github.sha }}"
          CHANGES="$(git diff --name-status ${{ github.event.before }} ${{ github.sha }})"
          echo "Compare: $COMPARE"
          echo "$CHANGES"
          MSG=$'Changes in this push:\n'"$COMPARE"$'\n\n'"$CHANGES"
          "$NOTIFY" "$MSG" "$SLACK_WEBHOOK"

      - name: Final pipeline result
        if: success()
        shell: bash
        run: |
          "$NOTIFY" "üöÄ Pipeline completed successfully!" "$SLACK_WEBHOOK"

      - name: Final pipeline failure
        if: failure()
        shell: bash
        run: |
          "$NOTIFY" "üî• Pipeline failed!" "$SLACK_WEBHOOK"
